install.packages("KernSmooth")
directorioActual
directorioActual
getdw()
source('~/DataScience/RProgramming/pollutantmean.R')
getdw()
add2 <- function(x,y){
x + y
}
add2(2,5)
directorioActual <- function(){
getdw()
}
directorioActual
directorioActual <- function(){
getwd()
}
directorioActual
getwd()
directorioActual <- {
getwd()
return
}
directorioActual
directorioActual <- {
return(getwd()
}
directorioActual <- {
return(getwd())
}
directorioActual <- function () {
return(getwd())
}
directorioActual
}
#dirIni
# dirIni
dirIni
dirIni <- getwd()
pollutantmean <- function(directory, pollutant, id = 1:332){
dirIni <- getwd()
}
dir-ini
dirIni
dirIni <- getwd()
pollutantmean <- function(directory, pollutant, id = 1:332){
dirIni <- getwd()
}
pollutantmean
dirIni
pollutantmean(RProgramming)
dirIni
dirFin
dirFin
}
dirFin <- directory
dirFin <- directory
pollutantmean <- function(directory, pollutant, id = 1:332){
dirIni <- getwd()
dirFin <- directory
}
pollutantmean(Documents)
dirFin
dirIni
dirIni <- getwd()
dirFin <- directory
dirFin <- directory
dirFin <- directory
pollutantmean (directory, pollutant, id = 1:332){
pollutantmean <- (directory, pollutant, id = 1:332){
dirIni <- getwd()
directory
}
pollutantmean <- (directory, pollutant, id = 1:332){
dirIni <- getwd()
directory
}
pollutantmean("Documents")
directory
return directory
return (directory)
}
pollutantmean("Documents")
directory
dirIni
Pollutantmean("directorio", "sulfato")
pollutantmean("directorio","sulfato")
directory
dirIni
return
return(pollutantmean("directorio"))
print (directory)
print (directory)
pollutantmean <- (directory, pollutant, id = 1:332){
dirIni <- getwd()
print (directory)
}
pollutantmean <- function (directory, pollutant, id = 1:332){
pollutantmean("directorio")
dirIni
pollutantmean <- function (directory, pollutant, id = 1:332){
directory <- "Documents"
pollutantmean
clear
pollutantmean <- function (directory, pollutant, id = 1:332){
dirIni <- getwd()
print (directory)
}
return
break
quit
exit
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachemean.R', echo=TRUE)
x <- 1:10000
vec <- makeVector(x)
vec$getmean()
cvec <- cachemean(x)
topenv(vec)
topenv()
topenv(x)
topenv(mean)
topenv(environment(vec))
topenv(environment(x))
topenv(envrironment(mean))
topenv(environment(mean))
topenv(environment(setmean))
topenv(environment(cachemean))
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
a <- makeCacheMatrix()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
a <- makeCacheMatrix()
a$setMatrix(1:4,2,2)
a$setMatrix(1:4, 2:6)
b <- makeVector
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachemean.R', echo=TRUE)
b <- makeVector
b <- setVector(1:4)
b$set(1:4)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachemean.R', echo=TRUE)
x <- 1:1000
vec <- makeVector(x)
vec$getmean()
mx <- mean(x)
vec$setmean(mx)
vec$getmean()
b <- cachemean()
b <- cachemean(x)
vec$getmean
vec$getmean()
c$getmean()
c$getmean(x)
b$getmean(x)
vec$get
vec$get()
b$set(x)
b$get()
c <- cachemean(vec)
c
d <- cachemean(vc(x))
v <- 1:9
x <- matrix(v, nrow = 3)
max <- makeCacheMatrix(x)
max$getInverse()
invx <- solve(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
max <- makeCacheMatrix(x)
mat <- makeCacheMatrix(x)
mat$getInverse()
invx <- solve(x)
mat$setInverse(invx)
mat$getInverse()
c.mat <- cacheSolve(mat)
c.mat
cacheSolve(mat)
cacheSolve(mat2)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat2)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
mat <- makeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
environment(mat)
View(x)
View(x)
environment(x)
exists(x)
exists("x")
?exists
missing(mat)
missing(mat)2
missing(mat2)
get(mat)
b <- paste(mat2)
mode(mat)
exists(mat)
exists("mat", mode="list")
exists("mat", mode="numeric")
exists("mat2", mode = "list")
exists(x, mode = "list")
exists("x", mode = "list")
cacheSolve(mat2)
mat2
u <- paste(/", x, /", sep = "")
u <- paste(\", x, \", sep = "")
u <- paste(""", x, """, sep = "")
u <- as.string(x)
get(mat)
get("mat")
z <- "mat"
exists(z)
z <- "mat2"
exists(z)
exists(toString(mat2))
exists(as.name(mat2))
exists(as.character(mat2))
z <- as.character(mat)
z
cacheSolve(mat2)
cacheSolve(mat)
cacheSolve("mat2")
cacheSolve("mat")
list(mat)
class(x)
inv.matrix
mat2
mat
cacheSolve(mat)
cacheSolve("mat")
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
cacheSolve(mat2)
environment(inv.matrix)
cacheSolve(mat)
inv.matrix
global.environment(inv.matrix)
MakeCacheMatrix()
class(inv.matrix)
View(x)
View(x)
View(inv.matrix)
a <<- inv.matrix
mat <- matrix(3:30, nrow = 3)
View(mat)
cacheSolve(mat)
cacheSolve(mat2)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
w <- mat
mat <- MakeCacheMatrix(w)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(w)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(w)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
mat <- MakeCacheMatrix(x)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
cacheSolve(x)
exists("mat")
is.null(inv.matrix)
mat$getMatrix()
mat$getInverse()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat$getInverse()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat$getInverse()
solve(mat)
solve(x)
list(mat)
mat[1,4]
mat[[1]][[4]]
mat[4]
class(mat[4])
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
w <- matrix(3:30, nrow = 4)
mat <- makeCacheMatrix(w)
mat$getInverse()
cacheMatrix(mat)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/.active-rstudio-document', echo=TRUE)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
w <- matrix(3:30, nrow = 4)
mat <- MakeCacheMatrix(w)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
mat <- makeCacheMatrix(x)
mat <- MakeCacheMatrix(x)
mat$SetMatrix()
mat <- MakeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
SetMatrix(x)
setMatrix(x)
y
x
a <- SetMatrix(x)
??SetMatrix
find(SetMatrix)
environment(SetMatrix())
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
SetMatrix
GetMatrix
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat <- MakeCacheMatrix(x)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
w <- matrix(3:30, nrow = 4)
mat <- MakeCacheMatrix(w)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
CacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
mat <- makeCacheMatrix(x)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
mat$getInverse()
mat$getInverse()
mat$getMtrx
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
cacheSolve(mat)
mat
mat$getMtrx
mat$getInverse()
?getInverse
??getInverse
getInverse()
getInverse
cacheSolve(mat)
mat$getInverse(x)
mat$getInverse()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
mat <- makeCacheMatrix(x)
mat$getInverse()
solveResult.matrix
setInverse
traceback()
?traceback()
mat$getInverse()
traceback()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
mat$getInverse()
makeCacheMatrix(x)
mat$setMtrx()
mat$setMtrx(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix2.R', echo=TRUE)
v <- c(2, 3, 5, 0, 0, 1, 1, 0, 1)
x <- matrix(v, nrow = 3)
mat <- makeCacheMatrix(x)
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix2.R', echo=TRUE)
mat <- makeCacheMatrix(x)
mat$getInverse()
mat$getMtrx()
mat$getMtrx()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachematrix2.R', echo=TRUE)
mat$getMtrx()
source('~/DataScience/RProgramming/ProgrammingAssignment2/cachemean.R', echo=TRUE)
vec <- makeVector(v)
vec$get()
mat$getMtrx()
mapply(rep, 1:4, 4:1)
mapply(rep, times = 1:4, MoreArgs = list(x = 42))
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
library(datasets)
data(iris)
ls()
?iris
iris
tapply(iris$Sepal.Lenght, iris$Specie(), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mhp <- tapply(mtcars$hp, mtcars$cyl, mean)
mph
ls()
list(mph)
mhp
mhp$4
mhp[1]
mhp[3] - mhp[1]
debug(ls)
ls()
sapply
q
undebug(ls)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
source('~/DataScience/GettingData/SamsungProject/run_analysis.R', echo=TRUE)
